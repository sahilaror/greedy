Ans 1   class Solution {
    static int minproduct(int a[], int b[], int n, int k){
        int min = 0, result = 0;
        int temp = 0;
        for (int i = 0; i < n; i++) {
            int pro = a[i] * b[i];
            result += pro;
            if      (pro < 0 && b[i] < 0)temp = (a[i] + 2 * k) * b[i];
            else if (pro < 0 && a[i] < 0)temp = (a[i] - 2 * k) * b[i];
            else if (pro > 0 && a[i] < 0)temp = (a[i] + 2 * k) * b[i];
            else if (pro > 0 && a[i] > 0)temp = (a[i] - 2 * k) * b[i];

            int d = Math.abs(pro - temp);
            if (d > min)min = d;
        }

        return result -min;
    }

    public static void main(String[] args){
        int a[] = {2, 3, 4, 5, 4};
        int b[] = {3, 4, 2, 3, 2};
        int n = 5, k = 3;
        System.out.println(minproduct(a, b, n, k));
    }
}


ANS 2


class ActivitySelection {
    public static void printMaxActivities(int s[], int f[],	int n){
        int i, j;
        i = 0;
        System.out.print(i + " ");


        for (j = 1; j < n; j++) {
            if (s[j] >= f[i]) {
                System.out.print(j + " ");
                i = j;
            }
        }
    }
    public static void main(String[] args){
        int start[] =  { 10,12,20 };
        int finish[] = { 20,25,30};
        int n = start.length;
        printMaxActivities(start, finish, n);
    }
}

ANS 3  	 	
 		class gasStation {
    public static int startingPoint(int gas[], int cost[]){
       int sum=0; int fuel=0; int start=0;
       for (int i=0; i<gas.length; i++){
           sum+=gas[i]-cost[i];
           fuel+=gas[i]-cost[i];

           if (fuel<0){
               fuel=0;
               start=i+1;
           }
       }
       if (fuel>=0){
           return start;
       }
       return -1;
    }
    public static void main(String[] args){
        int gas[]= {1,2,3,4,5};
        int cost[]={3,4,5,1,2};
       int result= startingPoint(gas,cost);
       System.out.println(result);

    }
}


ANS  4
			class a{
    public  static boolean canPlaceFlowers(int []flowerbed,int n){
        int count=0;

        for (int i=0; i<flowerbed.length; i++){
            if (flowerbed[i]==0) {
                int prev = (i == 0 || flowerbed[i - 1] == 0) ? 0 : 1;
                int next = (i == flowerbed.length - 1 || flowerbed[i + 1] == 0) ? 0 : 1;

                if (prev == 0 && next == 0) {
                    flowerbed[i] = 1;
                    count++;
                }
            }
        }
        return count>=n;
    }
    public static void main(String[] args) {
        int flowerbed[] = {1, 0, 0, 0, 1};
        int n = 4;
        System.out.println(canPlaceFlowers(flowerbed , n));
    }
}
			

ANS 5
import java.io.*;
import java.lang.*;
import java.util.*;

class Solution {
   public static int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));
        int[] curr = new int[] {intervals[0][0], intervals[0][1]};
        int maxCap = 1;
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] < curr[1]) continue; 
            curr[0] = intervals[i][0];
            curr[1] = intervals[i][1];
            maxCap++;
        }
        return intervals.length - maxCap;
    }
	public static void main(String[] args){
	    int[][] intervals = {{1,2},{2,3},{3,4},{1,3}};
		int n = 1;
		System.out.println("The desired output is :  " + eraseOverlapIntervals(intervals));
	}
}